package radius.voice.assistant.Services;

import java.lang.reflect.Constructor;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import radius.voice.assistant.Dao.MainDao;
import radius.voice.assistant.Utility.Literal;
import radius.voice.assistant.Utility.Utility;

public class MainService {
	/**
	 * Hold the Main DAO
	 */
	
	private MainDao dao_mysql;
	/**
	 * Hold the Main service
	 */
	private static MainService instance;

	/**
	 * {@link Constructor}
	 */
	private MainService() {
		dao_mysql = MainDao.getInstance();
	}

	/**
	 * @return
	 */
	public static MainService getInstance() {
		/**
		 * Check for the Null
		 */
		if (instance == null) {
			instance = new MainService();
		}
		return instance;
	}

	/**
	 * @return
	 */
	public int apiTest() {
		return 1;
	}

	/**
	 * @return
	 */
	public String getErrorLog() {
		try {
			/**
			 * Make the HTML to Return
			 */
			return Literal.ERRRO_HTML + new String(Files.readAllBytes(Paths.get(Utility.ERROR_HTML_PATH)))
					+ Literal.ERROR_HTML_TAIL;
		} catch (Exception e) {
			Utility.printStackTrace(e, this.getClass().getName());
		}
		return "No Error Found";
	}

	/**
	 * Returns Question table 
	 * 
	 * @return
	 */
	public List<Map<String, Object>> getQuestion() {
			
			return dao_mysql.question_Table() ;
			
		}

	
	/**
	 * Return the answer 
	 * 
	 * find the best answer for the query 
	 * 
	 * @return
	 */
	
	public String querySearch(final String query , final String keywords) {
		try {
			
			/**
			 * Split the keyword into mainkeys and keys 
			 */

		    String r[]= keywords.split("=") ;
		    Pattern p = Pattern.compile("\\[(.*?)\\]");
			 
			    
			    Matcher m = p.matcher((r[1]));
			    Matcher m1 = p.matcher((r[2]));
			    
			    m.find() ;
			    m1.find() ; 
			    String main_key =  m.group(1);
			        
			    String key = m1.group(1) ; 
			       
			String result = "";

			
		
			Set<String> linkedhasset_name
            = new LinkedHashSet<String>(Arrays.asList(query.split(" ")));
			for ( String s :linkedhasset_name) {
				if (s.equalsIgnoreCase("hello")) {
					result = result + "I am good ready to assist you. ";
				} else if (s.equalsIgnoreCase("Time")) {
					result = result + "Current time is " + new Timestamp(System.currentTimeMillis()) + ". ";
				}
				else {
				String msg  =dao_mysql.getAnswer(query,main_key , key);	
					
					result = result + msg ; 
					
					}
				
				}
				
			
			if (result.equalsIgnoreCase(Literal.EMPTY_STRING)) {
				return Literal.Ask_again;
			} else {
				System.out.println(result);
				return result.trim();
			}
		} catch (Exception e) {
			Utility.printStackTrace(e, this.getClass().getName());
		}
		return "No Error Found";
	}

	/**
	 * Returns full answer table 
	 * 
	 * @return
	 */
	public List<Map<String, Object>> getAnswerTb() {
		
		return dao_mysql.answer_table()  ;
	}
	

}
